@use '../../utils/bem-util' as *;
@use '../../utils/layout' as Layout;

@mixin container {
  overflow-x: auto;

  &:focus {
    outline: var(--color-focus-outline) 3px solid;
  }
}

@mixin base {
  --content-background-color: var(--color-white);

  border-collapse: collapse;
  line-height: 1.5;
  width: 100%;
}

@mixin caption {
  font-size: var(--fontsize-body-l);
  font-weight: normal;
  line-height: var(--lineheight-l);
  margin-bottom: var(--spacing-s);
  text-align: left;
}

@mixin th {
  border-bottom: 1px solid var(--color-black-20);
  font-size: var(--fontsize-body-m);
  font-weight: 500;
  line-height: var(--lineheight-l);
  padding: var(--spacing-xs) var(--spacing-m);
  text-align: left;
  white-space: nowrap;
}

@mixin td {
  background-color: var(--content-background-color);
  border-bottom: 1px solid var(--color-black-50);
  color: var(--color-black-90);
  font-size: var(--fontsize-body-m);
  font-weight: 400;
  line-height: 24px;
  padding: var(--spacing-xs) var(--spacing-m);
}

@mixin table(
  $all: true,
  $base: false,
  $dark: false,
  $light: false,
  $dense: false,
  $zebra: false,
  $withVerticalLines: false,
  $withVerticalHeader: false,
  $container: false,
  $textAlignRight: false
) {
  $blockName: 'table';

  @if $all or $container {
    @include create($block: $blockName, $dashed: 'container') {
      @include container;
    }
  }

  @if $all or $base {
    @include block($blockName) {
      @include base;

      th {
        @include th;
      }

      @include element('content') {
        @if $all or $textAlignRight {
          @include modifier('text-align-td-right') {
            td {
              text-align: right;
            }
          }
        }

        tr td {
          @include td;
        }
      }

      @include element('header-row') {
        background-color: var(--header-background-color);
      }

      @include element('caption') {
        @include caption;
      }
    }
  }

  @if $all or $dark {
    /// to create .hds-table--dark (was in css)
    @include blockModifier($blockName, 'dark') {
      --header-background-color: var(--color-bus);
    }

    /// to create .hds-table.hds-table--dark th (was in css)
    @include scopedModifier($blockName, 'dark') {
      th {
        color: var(--color-white);
      }
    }
  }

  @if $all or $light {
    /// to create .hds-table--dark (was in css)
    @include blockModifier($blockName, 'light') {
      --header-background-color: var(--color-silver);
    }

    /// to create .hds-table.hds-table--light th (was in css)
    @include scopedModifier($blockName, 'light') {
      th {
        color: var(--color-black-90);
      }
    }
  }

  @if $all or $dense {
    @include blockModifier($blockName, 'dense') {
      /// to create .hds-table--dense.hds-table th
      @include append($block: $blockName) {
        th {
          font-size: var(--fontsize-body-s);
          font-weight: bold;
          padding: 9px var(--spacing-s);
        }
      }

      /// to create  .hds-table--dense .hds-table
      @include addDescendant($block: $blockName) {
        /// to create  .hds-table--dense .hds-table__content
        @include element('content') {
          tr td {
            font-size: var(--fontsize-body-s);
            padding: 9px var(--spacing-s);
          }
        }

        /// to create  .hds-table--dense .hds-table__caption
        @include element('caption') {
          font-size: var(--fontsize-body-m);
          line-height: var(--lineheight-l);
          margin-bottom: var(--spacing-xs);
        }
      }
    }
  }

  @if $all or $zebra {
    @include elementInModifier($blockName, 'zebra', 'content') {
      tr td {
        border-bottom: none;
      }

      tr:nth-child(even) td {
        background-color: var(--color-black-10);
      }
    }
  }

  @if $all or $withVerticalLines {
    @include blockModifier($blockName, 'with-vertical-lines') {
      @include addDescendant($block: $blockName) {
        @include element('content') {
          border-left: 1px solid var(--color-black-50);

          td {
            border-right: 1px solid var(--color-black-50);
          }
        }

        @include element('header-row') {
          border-left: 1px solid var(--header-background-color);
          border-right: 1px solid var(--header-background-color);
        }
      }
    }
  }

  @if $all or $withVerticalHeader {
    @include blockElement($blockName, 'vertical-header-column') {
      background-color: var(--header-background-color);
    }

    @if $all or $withVerticalLines {
      /// to create  .hds-table--with-vertical-header.hds-table--with-vertical-lines .hds-table__content
      @include elementInCompoundModifiers($blockName, 'with-vertical-header', 'with-vertical-lines', 'content') {
        border-left: none;
      }

      /// to create .hds-table--with-vertical-lines.hds-table--with-vertical-header .hds-table__header-row
      @include elementInCompoundModifiers($blockName, 'with-vertical-lines', 'with-vertical-header', 'header-row') {
        border-left: none;
      }
    }
  }

  @if $all or $textAlignRight {
    @include blockModifier($blockName, 'text-align-right') {
      text-align: right;
    }
  }

  @include Layout.below-medium {
    @if $all or $base {
      @include block($blockName) {
        th {
          font-size: var(--fontsize-body-s);
          font-weight: bold;
          padding: 9px var(--spacing-s);
        }

        @include element('content') {
          tr td {
            font-size: var(--fontsize-body-s);
            padding: 9px var(--spacing-s);
          }
        }

        @include element('caption') {
          font-size: var(--fontsize-heading-xxs);
          letter-spacing: 0.2px;
          line-height: var(--lineheight-l);
          margin-bottom: var(--spacing-xs);
        }
      }
    }
  }
}
