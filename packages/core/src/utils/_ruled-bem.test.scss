/* stylelint-disable scss/function-no-unknown */
@use 'sass-true' as *;
@use './ruled-bem' as *;

@mixin testSCSS($all: true, $elements: true, $modifiers: true, $extras: true, $testContainer: '.test-output') {
  $void: args-to-rules(
    (
      'block': 'test',
      'all': $all,
      'elements': $elements,
      'modifiers': $modifiers,
      'extras': $extras,
      'testContainer': $testContainer,
    )
  );

  @include block {
    @include content('base') {
      --hds-test: var(--var-base);

      div {
        --hds-test-div: var(--var-div);
      }
    }

    @include modifier('modifier') {
      --hds-test-modifier: var(--var-modifier);

      span {
        --hds-test-modifier-span: var(--var-span);
      }

      @include element('modifier-element') {
        --hds-test-modifier-element: var(--var-modifier-element);

        ul {
          --hds-test-modifier-element-ul: var(--var-ul);
        }
      }
    }

    @include element('element') {
      --hds-test-element: var(--var-element);

      a {
        --hds-test-element-a: var(--var-a);
      }
    }

    @include element('another-element') {
      --hds-test-another-element: var(--var-another-element);

      li {
        --hds-test-another-element-li: var(--var-li);
      }
    }

    @include modifier('another-modifier') {
      --hds-test-another-modifier: var(--var-another-modifier);

      p {
        --hds-test-another-modifier-p: var(--var-p);
      }

      @include element('element') {
        --hds-test-another-modifier-element: var(--var-another-modifier-element);

        h1 {
          --hds-test-another-modifier-element-h1: var(--var-h1);
        }
      }
    }
  }
}

@include describe('get-map-key-with-value()') {
  @include it('returns first truthy value') {
    $map: (
      'truthy': true,
      'falsy': false,
    );

    @include assert-equal(get-map-key-with-value($map), 'truthy');
  }
}

@include describe('Test different parameters') {
  @include it('With a defined elements, only rules in it are outputted.') {
    @include assert {
      @include output {
        @include testSCSS(
          $elements: (
            'another-element': true,
            'base': true,
          ),
          $modifiers: false
        );
      }

      @include expect {
        /// at-root is required :(
        @at-root {
          .hds-test {
            --hds-test: var(--var-base);
          }

          .hds-test div {
            --hds-test-div: var(--var-div);
          }

          .hds-test__another-element {
            --hds-test-another-element: var(--var-another-element);
          }

          .hds-test__another-element li {
            --hds-test-another-element-li: var(--var-li);
          }
        }
      }
    }
  }

  @include it('With a defined modifier, only rules in it are outputted.') {
    @include assert {
      @include output {
        @include testSCSS($modifiers: 'modifier');
      }

      @include expect {
        @at-root {
          .hds-test--modifier {
            --hds-test-modifier: var(--var-modifier);
          }

          .hds-test--modifier span {
            --hds-test-modifier-span: var(--var-span);
          }

          .hds-test--modifier .hds-test__modifier-element {
            --hds-test-modifier-element: var(--var-modifier-element);
          }

          .hds-test--modifier .hds-test__modifier-element ul {
            --hds-test-modifier-element-ul: var(--var-ul);
          }
        }
      }
    }
  }

  @include it('No restrictions output all css') {
    @include assert {
      @include output {
        @include testSCSS($all: true);
      }

      @include expect {
        /// at-root is required :(
        @at-root {
          .hds-test {
            --hds-test: var(--var-base);
          }

          .hds-test div {
            --hds-test-div: var(--var-div);
          }

          .hds-test--modifier {
            --hds-test-modifier: var(--var-modifier);
          }

          .hds-test--modifier span {
            --hds-test-modifier-span: var(--var-span);
          }

          .hds-test--modifier .hds-test__modifier-element {
            --hds-test-modifier-element: var(--var-modifier-element);
          }

          .hds-test--modifier .hds-test__modifier-element ul {
            --hds-test-modifier-element-ul: var(--var-ul);
          }

          .hds-test__element {
            --hds-test-element: var(--var-element);
          }

          .hds-test__element a {
            --hds-test-element-a: var(--var-a);
          }

          .hds-test__another-element {
            --hds-test-another-element: var(--var-another-element);
          }

          .hds-test__another-element li {
            --hds-test-another-element-li: var(--var-li);
          }

          .hds-test--another-modifier {
            --hds-test-another-modifier: var(--var-another-modifier);
          }

          .hds-test--another-modifier p {
            --hds-test-another-modifier-p: var(--var-p);
          }

          .hds-test--another-modifier .hds-test__element {
            --hds-test-another-modifier-element: var(--var-another-modifier-element);
          }

          .hds-test--another-modifier .hds-test__element h1 {
            --hds-test-another-modifier-element-h1: var(--var-h1);
          }
        }
      }
    }
  }

  @include it('With a root block, default block class is dropped.') {
    @include assert {
      @include output {
        @include testSCSS($all: true, $testContainer: null);
      }

      @include expect {
        @at-root {
          .test-output {
            --hds-test: var(--var-base);
          }

          .test-output div {
            --hds-test-div: var(--var-div);
          }

          .test-output--modifier {
            --hds-test-modifier: var(--var-modifier);
          }

          .test-output--modifier span {
            --hds-test-modifier-span: var(--var-span);
          }

          .test-output--modifier .test-output__modifier-element {
            --hds-test-modifier-element: var(--var-modifier-element);
          }

          .test-output--modifier .test-output__modifier-element ul {
            --hds-test-modifier-element-ul: var(--var-ul);
          }

          .test-output__element {
            --hds-test-element: var(--var-element);
          }

          .test-output__element a {
            --hds-test-element-a: var(--var-a);
          }

          .test-output__another-element {
            --hds-test-another-element: var(--var-another-element);
          }

          .test-output__another-element li {
            --hds-test-another-element-li: var(--var-li);
          }

          .test-output--another-modifier {
            --hds-test-another-modifier: var(--var-another-modifier);
          }

          .test-output--another-modifier p {
            --hds-test-another-modifier-p: var(--var-p);
          }

          .test-output--another-modifier .test-output__element {
            --hds-test-another-modifier-element: var(--var-another-modifier-element);
          }

          .test-output--another-modifier .test-output__element h1 {
            --hds-test-another-modifier-element-h1: var(--var-h1);
          }
        }
      }
    }
  }
}
