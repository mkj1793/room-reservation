/* stylelint-disable scss/function-no-unknown */
@use "sass:map";
@use './helpers.scss' as helpers;
@use './rules.scss' as rules;
@use './selectors.scss' as selectors;

/// block: depth:0, selector: .hds-block, parent: null,
///   base content:         depth:0 or 1?,  parent: block     selector: '',                             contentOnly:true,
///   modifier:             depth:1,        parent: block     selector: .hds-block--modifier,
///     base content:       depth:1 or 2?,  parent: modifier  selector: ''r,                            contentOnly:true,
///     element table:      depth:2,        parent: modifier  selector: .hds-block--modifier__element
///   element:              depth:1,        parent: block     selector: .hds-block__element
///     base content:       depth:1 or 2?,  parent: element   selector: '',                             contentOnly:true,

@function init-levels() {
  $levels: [];

  @return $levels;
}

@function create-level-data($parent, $args...) {
  $parentDepth: if($parent, map.get($parent, 'depth'), -1);
  $parentIsContentOnly: if($parent, map.get($parent, 'contentOnly'), false);
  $depth: if($parentIsContentOnly, $parentDepth, $parentDepth + 1);
  $levelProps: helpers.get-map-data-with-value(helpers.arg-list-to-map($args...));

  @if not $levelProps {
    @return (depth: -1, $type: null, $name: null, $parent: null);
  }

  $type: map.get($levelProps, 'key');
  $name: map.get($levelProps, 'value');

  @return ('parent': $parent, 'type': $type, 'depth': $depth, 'name': $name);
}

@function append-level-rules($rules, $level) {
  $parent: map.get($level, 'parent');
  $parentAllowed: if($parent, map.get($parent, 'isAllowed'), true);
  $isAllowed: $parentAllowed and is-level-allowed($rules, $level);
  $contentOnly: $isAllowed and is-content-only($rules, $level);
  $selector: $isAllowed and not $contentOnly and selectors.create-level-selector($rules, $level);

  ///
  $level: map.set($level, 'isAllowed', $isAllowed);
  $level: map.set($level, 'selector', $selector);
  $level: map.set($level, 'contentOnly', $contentOnly);

  @return $level;
}

@function create-level($rules, $args...) {
  $level: create-level-data($args...);

  @if not map.get($level, 'type') {
    @return $level;
  }

  @return append-level-rules($rules, $level);
}

@function get-current-level($levels) {
  @return helpers.get-last-list-item($levels);
}

@function get-closest($type) {
  @return false;
}

@function is-level-allowed($rules, $level) {
  @return false;
}

@function is-content-only($rules, $level) {
  @return false;
}
