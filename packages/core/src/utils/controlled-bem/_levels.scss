/* stylelint-disable scss/function-no-unknown */
@use "sass:map";
@use "sass:meta";
@use './globals.scss' as globals;
@use './helpers.scss' as helpers;
@use './rules.scss' as rules;
@use './selectors.scss' as selectors;

/// block: depth:0, selector: .hds-block, parent: null,
///   base content:         depth:0 or 1?,  parent: block     selector: '',                             contentOnly:true,
///   modifier:             depth:1,        parent: block     selector: .hds-block--modifier,
///     base content:       depth:1 or 2?,  parent: modifier  selector: ''r,                            contentOnly:true,
///     element table:      depth:2,        parent: modifier  selector: .hds-block--modifier__element
///   element:              depth:1,        parent: block     selector: .hds-block__element
///     base content:       depth:1 or 2?,  parent: element   selector: '',                             contentOnly:true,

@function init-levels() {
  $levels: [];

  @return $levels;
}

@function create-level-data($parent, $args...) {
  $parentDepth: if($parent, map.get($parent, 'depth'), -1);
  $parentIsContentOnly: if($parent, map.get($parent, 'contentOnly'), false);
  $depth: if($parentIsContentOnly, $parentDepth, $parentDepth + 1);
  $levelProps: helpers.get-map-data-with-value(helpers.arg-list-to-map($args...));

  @if not $levelProps {
    @return (depth: -1, $type: null, $name: null, $parent: null);
  }

  $type: map.get($levelProps, 'key');
  $name: map.get($levelProps, 'value');

  @return ('parent': $parent, 'type': $type, 'depth': $depth, 'name': $name);
}

@function append-level-rules($ruleMap, $config, $level) {
  $parent: map.get($level, 'parent');
  $parentAllowed: if($parent, map.get($parent, 'isAllowed'), true);
  $isAllowed: $parentAllowed and is-level-allowed-in-rules($ruleMap, $level);
  $contentOnly: $isAllowed and is-level-content-only($level);
  $selector: $isAllowed and not $contentOnly and create-level-selector($config, $level);

  ///
  $level: map.set($level, 'isAllowed', $isAllowed);
  $level: map.set($level, 'selector', $selector);
  $level: map.set($level, 'contentOnly', $contentOnly);

  @return $level;
}

@function create-level($ruleMap, $config, $args...) {
  $level: create-level-data($args...);

  @return append-level-rules($ruleMap, $config, $level);
}

@function get-current-level($levels) {
  @return helpers.get-last-list-item($levels);
}

@function get-level-parent-selector($config, $level) {
  $parent: get-level-parent($level);

  @if $parent {
    @return get-level-selector($parent);
  }

  @return globals.get-root-selector($config);
}

@function create-level-selector($config, $level) {
  $initial: get-level-parent-selector($config, $level);
  $type: get-level-type($level);
  $name: get-level-name($level);

  @if helpers.can-value-be-falsy($name) and is-block-type($type) {
    $name: globals.get-block-name($config);
  }

  @return selectors.create-selector($initial, $type, $name, $config);
}

@function get-closest($level, $type) {
  $parent: get-level-parent($level);

  @while $parent {
    @if get-level-type($parent) == $type {
      @return $parent;
    }

    $parent: get-level-parent($parent);
  }

  @return null;
}

@function get-closest-entity($level) {
  $parent: get-level-parent($level);

  @while $parent {
    $parentType: get-level-type($parent);

    @if is-block-type($parentType) or is-modifier-type($parentType) or is-element-type($parentType) {
      @return $parent;
    }

    $parent: get-level-parent($parent);
  }

  @return null;
}

@function is-level-allowed-in-rules($ruleMap, $level) {
  $type: get-level-type($level);
  $name: get-level-name($level);

  @if is-block-type($type) {
    @return true;
  } @else if is-modifier-type($type) {
    @return rules.is-modifier-allowed($ruleMap, $name);
  } @else if is-element-type($type) {
    // get parent modifier
    $closestModifier: get-closest($level, 'modifier');

    @if $closestModifier {
      @return rules.is-modifier-element-allowed($ruleMap, get-level-name($closestModifier), $name);
    } @else {
      @return rules.is-element-allowed($ruleMap, $name);
    }

    @return false;
  } @else if is-content-type($type) {
    $closestEntity: get-closest-entity();

    @if not $closestEntity {
      @return true;
    }

    $closestType: get-level-type($closestEntity);

    @if is-block-type($closestType) {
      @if not $name or globals.is-base-name($name) {
        @return rules.is-base-content-allowed($ruleMap);
      }
    } @else if not $name {
      @return true;
    } @else if is-modifier-type($closestType) {
      @return rules.is-modifier-element-allowed($ruleMap, get-level-name($closestEntity), $name);
    } @else if is-element-type($closestType) {
      @return rules.is-element-allowed($ruleMap, get-level-name($closestEntity));
    }
  } @else if is-extra-type($type) {
    @return rules.is-extra-allowed($ruleMap, $name);
  }

  @return false;
}

@function is-level-content-only($level) {
  @return false;
}

@function get-level-type($level) {
  @return map.get($level, 'type');
}

@function get-level-name($level) {
  @return map.get($level, 'name');
}

@function get-level-parent($level) {
  @return map.get($level, 'parent');
}

@function get-level-depth($level) {
  @return map.get($level, 'depth');
}

@function get-level-selector($level) {
  @return map.get($level, 'selector');
}

@function is-level-allowed($level) {
  @return map.get($level, 'isAllowed');
}

@function is-block-type($type) {
  @return $type == 'block';
}

@function is-modifier-type($type) {
  @return $type == 'modifier';
}

@function is-element-type($type) {
  @return $type == 'element';
}

@function is-content-type($type) {
  @return $type == 'content';
}

@function is-extra-type($type) {
  @return $type == 'extra';
}

@function is-block-level($level) {
  @return is-block-type(get-level-type($level));
}

@function is-modifier-level($level) {
  @return is-block-type(get-level-type($level));
}

@function is-element-level($level) {
  @return is-block-type(get-level-type($level));
}

@function is-content-level($level) {
  @return is-block-type(get-level-type($level));
}

@function is-extra-level($level) {
  @return is-block-type(get-level-type($level));
}
