/* stylelint-disable scss/function-no-unknown */
@use "sass:map";
@use './globals.scss' as globals;
@use './levels.scss' as levels;
@use './rules.scss' as rules;
@use './helpers.scss' as helpers;
@use './process.scss' as process;
@use './output.scss' as output;

@function init-controlled-bem($args...) {
  $argMap: helpers.arg-list-to-map($args...);
  $rootSelector: null;
  $parent: &;
  $rules: rules.rules-to-map($argMap);
  $levels: [];
  $blockName: map.get($argMap, 'block');

  @debug '$blockName #{$blockName}';

  $config: (
    'blockName': $blockName,
    'rootSelector': $rootSelector,
    'parent': $parent,
    'blockPrefix': 'hds-',
    'modifierDelimeter': '--',
    'elementDelimeter': '__',
  );

  @return globals.init-global-bem($rules, $levels, $config);
}

/// for future use
@function end-controlled-bem() {
  @return null;
}

@mixin block() {
  $processData: process.start(
    $block: '',
  );

  @include output.emit($processData) {
    @content;
  }

  $void: process.end();
}

@mixin content($element) {
  $processData: process.start(
    $content: $element,
  );

  @include output.emit($processData) {
    @content;
  }

  $void: process.end();
}

@mixin modifier($modifier) {
  $processData: process.start(
    $modifier: $modifier,
  );

  @include output.emit($processData) {
    @content;
  }

  $void: process.end();
}

@mixin element($element) {
  $processData: process.start(
    $element: $element,
  );

  @include output.emit($processData) {
    @content;
  }

  $void: process.end();
}
