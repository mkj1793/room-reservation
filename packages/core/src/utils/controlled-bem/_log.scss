/* stylelint-disable scss/function-no-unknown */
@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use './helpers' as helpers;

/// This file is currently for testing args... in scss

/// calling with log($block: 'blockName', $elem: 'elem') works fine
/// type-of args is "arglist"
/// inspect $args is empty
/// length $args is 0
/// GET ARGS AS MAP:
/// $map: meta.keywords($args);
/// map will have all data in args
///
///
/// calling with log('blockName', $elem: 'elem') makes
/// inspect $args is ('blockName')
/// length $args is 1
/// GET ARGS AS MAP:
/// $map: meta.keywords($args);
/// map will have $elem
@function log($args...) {
  /// debug '***** **** ****';

  $map: meta.keywords($args);
  $rules: (
    'rule1': true,
    'rule2': false,
  );

  /// debug 'len:#{list.length($args)}';
  /// debug 'type-of:#{meta.type-of($args)}';
  /// debug 'inspect args:#{meta.inspect($args)}';
  /// debug 'inspect map:#{meta.inspect($map)}';
  /// debug 'block:#{map.get($map, "block")}';

  $void: logWithExtra(
    $rules: $rules,
    $block2: 'block2',
    $args...,
  );

  @return true;
}

@function logWithExtra($rules, $args2...) {
  /// type-of args2 is "arglist"
  /// inspect $args2 is empty
  /// length $args is 0
  ///
  /// $map: meta.keywords($args2) will not have $rules

  /// inspect $rules is a map
  /// debug '***** 2222 ****';

  $map: meta.keywords($args2);

  /// debug 'len:#{list.length($args2)}';
  /// debug 'type-of 2:#{meta.type-of($args2)}';
  /// debug 'inspect args 2:#{meta.inspect($args2)}';
  /// debug 'inspect map 2:#{meta.inspect($map)}';
  /// debug 'block 2:#{map.get($map, "block2")}';
  /// debug 'inspect rules:#{meta.inspect($rules)}';
  @return true;
}

@function logx($args...) {
  /// THIS CAUSES ERRORS WHEN CALLED
  /// logger.logx(
  /// $block: 'blockName',
  /// $elem: 'elem',
  /// );
  $argMap: helpers.arg-list-to-map($args);
  /// NO ERROR WITH
  /// $argMap: helpers.arg-list-to-map($args);

  @return true;
}

/// when calling func order or named params with args... matter
/// logZ($param1, $param3, $param2, $args...);
/// does NOT mean param3 is in args. param3 is now param2
@function logZ($param1, $param2, $args...) {
  $argMap: helpers.arg-list-to-map($args);
  @return true;
}
