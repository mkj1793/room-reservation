///
/* stylelint-disable scss/function-no-unknown */
///

@use "sass:string";
@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "sass:selector";
@use "sass-easy-bem/sass-easy-bem.scss" as BemNpm;

/// Examples
///
/// Result:   .hds-table
/// SASS:     @include BemUtil.block('table')
///
///           or
///
///           @include BemUtil.create($block: 'table')
///
/// Result:   .hds-table-container
/// SASS:     @include BemUtil.create($block: 'table', $dashed: 'container')
///
///
/// Result:   .hds-table__content--text-align-td-right
/// SASS:     @include BemUtil.create($block: 'table', $element: 'content', $modifier:'text-align-td-right')
///
///           or short hand
///
///           @include BemUtil.elementWithModifier('table', 'content', 'text-align-td-right')
///
///           or nested
///
///           @include BemUtil.block('table') {
///             @include BemUtil.element('content') {
///               @include BemUtil.modifier('text-align-td-right') {
///                 ...
///               }
///             }
///           }
///
/// Result:   .hds-table--dark
/// SASS:     @include BemUtil.blockModifier('table', 'dark')
///
///
/// Result:   .hds-table.hds-table--dark
/// SASS:     @include BemUtil.blockCompoundModifier('table', 'dark')
///
///
/// Result:   .hds-table--dense.hds-table
/// SASS:      @include BemUtil.blockModifier('table', 'dense') {
///               @include BemUtil.append($block: 'table') {
///                 ...
///               }
///            }
///
///
/// Result:   .hds-table--dense .hds-table__content
/// SASS:     @include BemUtil.blockModifier('table', 'dense') {
///               @include BemUtil.element('caption') {
///                 ...
///               }
///            }
///
///
/// Result:   .hds-table--dense .hds-table__content
/// SASS:     elementInModifier('table', $modifierName, $elementName)
///
///           or nested
///
///           @include BemUtil.blockModifier('table', 'dense'){
///             @include BemUtil.addDescendant($block: 'table') {
///               @include BemUtil.element('content') {
///                ....
///               }
///             }
///           }
///
///
///
/// Result:   .hds-table--with-vertical-lines.hds-table--with-vertical-header .hds-table__header-row
/// SASS:     BemUtil.elementInCompoundModifiers('table', 'with-vertical-lines', 'with-vertical-header', 'header-row')
///
///           or nested
///
///           @include BemUtil.blockModifier('table', 'hds-table--with-vertical-lines') {
///             @include BemUtil.addCompound($block: 'table') {
///               @include BemUtil.modifier('with-vertical-header') {
///                 @include BemUtil.addDescendant($block: 'table') {
///                   @include BemUtil.element('header-row') {
///                     ...
///                   }
///                 }
///               }
///             }
///           }
///
///
/// Result:   .hds-table--with-vertical-lines.hds-table--with-vertical-header
/// SASS:     BemUtil.compoundModifiers('table', 'with-vertical-lines', 'with-vertical-header')
///
///           or nested
///
///           @include BemUtil.blockModifier('table', 'hds-table--with-vertical-lines') {
///             @include BemUtil.addCompound($block: 'table') {
///               @include BemUtil.modifier('with-vertical-header') {
///                 ...
///               }
///             }
///           }
///
///
/// Result:   css
/// SASS:     code
///

$blockPrefix: 'hds-';
$modifierDelimeter: '--';
$elementDelimeter: '__';

/// Combines given arguments to a single selector
/// Arguments are maps in format of $type:$value, for example args-to-selector($block: 'myBlock', $modifier: 'mod', $element: 'elem', $class: 'anotherClass')
/// If type is
/// "$block" then ".hds-$value" is added to the selector
/// "$modifier" then "--$value" is added to the selector
/// "$element" then "__$value" is added to the selector
/// "$class" then ".$value" is added to the selector
/// "$dashed" then "-$value" is added to the selector
/// "$id" then "#$value" is added to the selector
/// "$element" then plain "$value" is added to the selector
@function args-to-selector($args...) {
  $selector: '';

  @each $type, $value in meta.keywords($args...) {
    $prefix: null;

    @if $type == 'block' {
      $prefix: '.#{$blockPrefix}';
    }

    @if $type == 'modifier' {
      $prefix: '#{$modifierDelimeter}';
    }

    @if $type == 'element' {
      $prefix: '#{$elementDelimeter}';
    }

    @if $type == 'class' {
      $prefix: '.';
    }

    @if $type == 'id' {
      $prefix: '#';
    }

    @if $type == 'dashed' {
      $prefix: '-';
    }

    /* stylelint-disable-next-line scss/at-if-no-null */
    @if $prefix != null {
      $selector: '#{$selector}#{$prefix}#{$value}';
    }
  }

  @return $selector;
}

/// Creates a selector from a list of arguments. Each function argument is appended to the result.
/// Example: BemUtil.create-selector($block: 'myBlock', $modifier: 'mod', $element: 'elem', $class: 'anotherClass')
/// Results in .hds-myBlock--mod__elem.anotherClass
/// Function can be called with any arguments, but same attribute cannot be twice.
/// BemUtil.create($class: 'anotherClass', $block: 'myBlock', $element: 'elemA', $modifier: 'mod')
/// BemUtil.create($block: 'myBlock', $class: 'anotherClass')
@function create-selector($args...) {
  @return args-to-selector($args);
}

/// Creates a selector from arguments with given content.
/// See create-selector()
@mixin create($args...) {
  $lastSelector: BemNpm.get-last-selector('#{&}');
  $selector: args-to-selector($args);

  @at-root {
    #{$lastSelector}#{$selector} {
      @content;
    }
  }
}

/// Adds a new compound selector to the parent selector
/// Example: if parent is created with BemUtil.create($block: 'myBlock', $modifier: 'mod')
/// then BemUtil.addCompound($block: 'compoundBlock', $element: 'compoundElement')
/// Results in .hds-myBlock--mod.hds-compoundBlock__compoundElement
@mixin addCompound($args...) {
  $lastSelector: BemNpm.get-last-selector('#{&}');
  $selector: args-to-selector($args);

  @at-root {
    #{$lastSelector}#{$selector} {
      @content;
    }
  }
}

/// Adds a descendant selector to the parent selector
/// Example: if parent is created with BemUtil.create($block: 'myBlock', $modifier: 'mod')
/// then BemUtil.addDescendant($block: 'descendantBlock', $element: 'descendantClass')
/// Results in .hds-myBlock--mod .hds-descendantBlock.descendantClass
@mixin addDescendant($args...) {
  $lastSelector: BemNpm.get-last-selector('#{&}');
  $selector: args-to-selector($args);

  @at-root {
    #{$lastSelector} #{$selector} {
      @content;
    }
  }
}

/// Creates a list of selectors from arguments
/// If parent exists that is first selector in the list
/// @include BemUtil.listSelectors(
///   '#id',
/// BemUtil.create-selector($class: 'listClass'),
/// BemUtil.create-selector($block: 'listBlock'),
/// '.selector'
/// ){...css}
/// Results in
/// (parent), #id, .listClass, .hds-listBlock, .selector {...css}

@mixin listSelectors($args...) {
  $lastSelector: BemNpm.get-last-selector('#{&}');
  $selectors: ();

  @if string.length($lastSelector) > 0 {
    $selectors: list.append($selectors, $lastSelector, $separator: comma);
  }

  @each $selector in $args {
    $selectors: list.append($selectors, $selector, $separator: comma);
  }

  @at-root {
    #{$selectors} {
      @content;
    }
  }
}

/// Appends a given selector to the parent selector
/// Example: if parent is created with BemUtil.create($block: 'myBlock')
/// then BemUtil.append($element: 'appendedElement',$modifier:'appendedModifier')
/// Results in .hds-myBlock__appendedElement--appendedModifier;
@mixin append($args...) {
  $lastSelector: BemNpm.get-last-selector('#{&}');
  $selector: args-to-selector($args);

  @at-root {
    #{&}#{$selector} {
      @content;
    }
  }
}

/// Finds current block selector from ancestors and appends to the selector
/// Example: if parent is created with($block: 'myBlock', $modifier: 'mod', $element: 'elem', $class: 'anotherClass')
/// then BemUtil.appendToBlock($element: 'appendedElement',$modifier:'appendedModifier')
/// Results in .hds-myBlock__appendedElement--appendedModifier;
@mixin appendToBlock($args...) {
  $is-modifier: string.index('#{&}', $modifierDelimeter);
  $block: BemNpm.get-block(&);
  $selector: args-to-selector($args);

  @if not $is-modifier {
    @at-root {
      #{$block}#{$selector} {
        @content;
      }
    }
  }

  @if $is-modifier {
    $is-element: string.index('#{&}', $elementDelimeter);

    @if $is-element {
      $block: string.slice('#{&}', 0, string.index('#{&}', $elementDelimeter) - 1);

      @at-root {
        & #{$block}#{$selector} {
          @content;
        }
      }
    }

    @if not $is-element {
      $block: string.slice('#{&}', 0, string.index('#{&}', $modifierDelimeter) - 1);
      $block: string.slice($block, 1, string.index(string.slice($block, 2, -1), '.'));

      @at-root {
        & #{$block}#{$selector} {
          @content;
        }
      }
    }
  }
}

/// shorthand for create($block: $blockName)
@mixin block($blockName) {
  @include create($block: $blockName) {
    @content;
  }
}

/// shorthand for append($modifier: $modifierName)
@mixin modifier($modifierName) {
  @include append($modifier: $modifierName) {
    @content;
  }
}

/// shorthand for append($element: $elementName)
@mixin element($elementName) {
  @include append($element: $elementName) {
    @content;
  }
}

/// shorthand for append($dashed: $className)
@mixin dashed($className) {
  @include append($dashed: $className) {
    @content;
  }
}

/// shorthand for creating .hds-block.hds-block--modifier
@mixin blockCompoundModifier($blockName, $modifierName) {
  @include block($blockName) {
    @include append($block: $blockName) {
      @include modifier($modifierName) {
        @content;
      }
    }
  }
}

/// shorthand for creating .hds-block--modifier
@mixin blockModifier($blockName, $modifierName) {
  @include create($block: $blockName, $modifier: $modifierName) {
    @content;
  }
}

/// shorthand for creating .hds-block__element
@mixin blockElement($blockName, $elementName) {
  @include create($block: $blockName, $element: $elementName) {
    @content;
  }
}

/// shorthand for creating .hds-table__element--modifier
@mixin elementWithModifier($blockName, $elementName, $modifierName) {
  @include create($block: $blockName, $element: $elementName, $modifier: $modifierName) {
    @content;
  }
}

/// shorthand for creating .hds-block--modifier .hds-block__element
@mixin elementInModifier($blockName, $modifierName, $elementName) {
  @include blockModifier($blockName, $modifierName) {
    @include addDescendant($block: $blockName) {
      @include element($elementName) {
        @content;
      }
    }
  }
}

/// shorthand for creating .hds-block--modifier1.hds-block--modifier2
@mixin compoundModifiers($blockName, $modifier1Name, $modifier2Name) {
  @include blockModifier($blockName, $modifier1Name) {
    @include addCompound($block: $blockName) {
      @include modifier($modifier2Name) {
        @content;
      }
    }
  }
}

/// shorthand for creating .hds-block--modifier1.hds-block--modifier2 .hds-block__element
@mixin elementInCompoundModifiers($blockName, $modifier1Name, $modifier2Name, $elementName) {
  @include blockModifier($blockName, $modifier1Name) {
    @include addCompound($block: $blockName) {
      @include modifier($modifier2Name) {
        @include addDescendant($block: $blockName) {
          @include element($elementName) {
            @content;
          }
        }
      }
    }
  }
}

@function parse-args($args) {
  $block: '';
  $truthy: ();
  $partials: ();
  $hasRoot: false;
  $argsAsMap: $args;
  $all: map.get($argsAsMap, 'all');
  $hasOthersThanAll: false;

  /// @debug map.keys($argsAsMap);

  $parent: &;

  /// @debug 'parent:#{$parent}';

  @if $parent {
    $hasRoot: true;
  }

  /// @debug 'hasRoot1: #{$hasRoot}';

  @each $type, $value in $argsAsMap {
    $prefix: null;

    @if $type == 'blockName' {
      $block: $value;
    } @else {
      $typeOf: meta.type-of($value);

      @if $type != 'all' {
        $hasOthersThanAll: true;
      }

      @if $typeOf == 'string' {
        /// @debug '#{$type}==#{$value}';
        $combinedPartialName: '#{$type}#{$elementDelimeter}#{$value}';
        $partials: map.set($partials, $combinedPartialName, true);
        $partials: map.set($partials, $type, $value);
      } @else if $typeOf == 'bool' and $value {
        /// @debug '#{$type}==#{$value}';
        $truthy: map.set($truthy, $type, $value);
      } @else if $typeOf == 'map' {
        @each $elementName, $elementValue in $value {
          $combinedPartialName: '#{$type}#{$elementDelimeter}#{$elementName}';
          $partials: map.set($partials, $type, true);

          /// @debug 'el #{$combinedPartialName}==#{$elementValue}';
          $partials: map.set($partials, $combinedPartialName, $elementValue);
        }
      }
    }
  }

  @if $hasOthersThanAll and $all {
    @warn "parse-args(): 'All' set to true, but partials are configured. 'All' is set to false.";

    $truthy: map.set($truthy, 'all', false);
  }

  $rules: (
    'block': $block,
    'truthy': $truthy,
    'partials': $partials,
    'hasRoot': $hasRoot,
  );

  /// @debug '####';
  /// @debug meta.inspect($rules);
  /// @debug meta.inspect($truthy);
  // @debug meta.inspect($partials);

  /// @debug '####';
  @return $rules;
}

/// $modifierName: true
/// $modifierName: ($elementName: true)
/// $modifierName: ($elementName: "selector")
@function get-arg-value($rules, $modifierOrBase: null, $element: null) {
  $partials: map.get($rules, 'partials');
  $truthy: map.get($rules, 'truthy');
  $all: map.get($truthy, 'all') == true;

  /// @debug 'modifierOrBase::#{$modifierOrBase}';
  @if $all {
    @return true;
  }

  @if $modifierOrBase {
    $value: map.get($truthy, $modifierOrBase) or map.get($partials, $modifierOrBase);

    /// @debug 'value modifierOrBase::#{$modifierOrBase}==#{$value}';
    @if meta.type-of($value) == 'bool' and $value {
      @return true;
    }

    @if meta.type-of($element) == 'null' and $value {
      @return true;
    }

    /// @debug 'el test::#{$element}==#{$value}';
    @if $element {
      $combinedPartialName: '#{$modifierOrBase}#{$elementDelimeter}#{$element}';
      $value: map.get($partials, $combinedPartialName);

      /// @debug 'value c combinedPartialName::#{$combinedPartialName}==#{$value}';
      @if $value {
        @return $value;
      }
    }
  }

  @return null;
}

@mixin blockIfNeeded($rules) {
  $value: get-arg-value($rules, 'base');
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include create($block: map.get($rules, 'block')) {
      @content;
    }
  }
}

@mixin blockModifierIfNeeded($rules, $modifierName) {
  $value: get-arg-value($rules, $modifierName);
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include create($block: map.get($rules, 'block'), $modifier: $modifierName) {
      @content;
    }
  }
}

@mixin blockModifierElementIfNeeded($rules, $modifierName, $elementName) {
  $value: get-arg-value($rules, $modifierName, $elementName);
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include create($block: map.get($rules, 'block'), $modifier: $modifierName, $element: $elementName) {
      @content;
    }
  }
}

@mixin modifierIfNeeded($rules, $modifierName) {
  $value: get-arg-value($rules, $modifierName);
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include modifier($modifierName) {
      @content;
    }
  }
}

@mixin dashedIfNeeded($rules, $className) {
  $value: get-arg-value($rules, $className);
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include dashed($className) {
      @content;
    }
  }
}

@mixin blockCompoundModifierIfNeeded($rules, $modifierName) {
  $value: get-arg-value($rules, $modifierName);
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include blockCompoundModifier(map.get($rules, 'block'), $modifierName) {
      @content;
    }
  }
}

@mixin elementIfNeeded($rules, $element) {
  $value: get-arg-value($rules, $element);
  $hasRoot: map.get($rules, 'hasRoot');

  @if $hasRoot and $value {
    @content;
  } @else if $value {
    @include element($element) {
      @content;
    }
  }
}

@mixin contentIfNeeded($rules, $identifier) {
  $value: get-arg-value($rules, $identifier);

  @if $value {
    @content;
  }
}

@mixin compoundModifiersIfNeeded($blockName, $modifier1Name, $modifier2Name) {
  $mod1Value: get-arg-value($rules, $modifier1Name);
  $mod2Value: get-arg-value($rules, $modifier2Name);

  @if $mod1Value and $mod2Value {
    @include blockCompoundModifier(map.get($rules, 'block'), $modifier1Name, $modifier2Name) {
      @content;
    }
  }
}

@mixin elementInCompoundModifiersIfNeeded($blockName, $modifier1Name, $modifier2Name, $elementName) {
  $mod1Value: get-arg-value($rules, $modifier1Name, $elementName);
  $mod2Value: get-arg-value($rules, $modifier2Name, $elementName);

  @if $mod1Value and $mod2Value {
    @include elementInCompoundModifiers(map.get($rules, 'block'), $modifier1Name, $modifier2Name) {
      @content;
    }
  }
}
