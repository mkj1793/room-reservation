@use "sass:string";
@use "sass-easy-bem/sass-easy-bem.scss" as BemNpm;

$blockPrefix: 'hds-';
$modifierDelimeter: '--';
$elementDelimeter: '__';

// prefix added by HDS
// use for creating classes like .hds-<$block>
// set $noPrefix to false to create classes like .-<$block>
@mixin block($block, $noPrefix: false) {
  $className: $block;

  @if not($noPrefix) {
    $className: #{$blockPrefix + $block};
  }

  @at-root {
    .#{$className} {
      @content;
    }
  }
}

// use inside block() or another element() to create scoped classes like .hds-<block>.hds-<block>__<$element>
@mixin element($element) {
  @include BemNpm.element($element) {
    @content;
  }
}

// use inside block() or element() to create scoped classes like .hds-<block>.hds-<block>--<$modifier>
@mixin modifier($modifier) {
  @include BemNpm.modifier($modifier) {
    @content;
  }
}

// use inside any selector to create linked classes like <selector>.hds-<block>
@mixin linkedBlock($block) {
  $parent-selector: BemNpm.get-parent-selector('#{&}');
  $last-selector: BemNpm.get-last-selector('#{&}');
  // stylelint-disable-next-line scss/function-no-unknown
  $element: BemNpm.get-element($last-selector);

  @at-root {
    @if $parent-selector {
      #{$parent-selector}.#{$last-selector}#{$blockPrefix + $block} {
        @content;
      }
    } @else {
      #{$last-selector}.#{$blockPrefix + $block} {
        @content;
      }
    }
  }
}

// use inside any selector to create modifier like <selector>--<modifier>
@mixin linkedModifier($modifier) {
  $parent-selector: BemNpm.get-parent-selector('#{&}');
  $last-selector: BemNpm.get-last-selector('#{&}');
  // stylelint-disable-next-line scss/function-no-unknown
  $element: BemNpm.get-element($last-selector);

  @at-root {
    @if $parent-selector {
      #{$parent-selector}.#{$last-selector}#{$modifierDelimeter}#{$modifier} {
        @content;
      }
    } @else {
      #{$last-selector}#{$modifierDelimeter}#{$modifier} {
        @content;
      }
    }
  }
}

// use inside any selector to create linked classes like <selector>.<className>
@mixin linkedClass($block) {
  $parent-selector: BemNpm.get-parent-selector('#{&}');
  $last-selector: BemNpm.get-last-selector('#{&}');
  // stylelint-disable-next-line scss/function-no-unknown
  $element: BemNpm.get-element($last-selector);

  @at-root {
    @if $parent-selector {
      #{$parent-selector}.#{$last-selector}#{$element} {
        @content;
      }
    } @else {
      #{$last-selector}.#{$block} {
        @content;
      }
    }
  }
}

// end of sass-easy-bem

// HDS add-on to create .hds-<block>--modifier instead of .hds-<block>.hds-<block>--modifier
@mixin unscopedModifier($block, $modifier) {
  @at-root {
    .#{$blockPrefix + $block}#{$modifierDelimeter}#{$modifier} {
      @content;
    }
  }
}

// HDS add-on to to append new modifier to current selector
@mixin childModifier($block, $modifier) {
  .#{$blockPrefix + $block}#{$modifierDelimeter}#{$modifier} {
    @content;
  }
}

// HDS add-on to create .hds-<block>__element instead of .hds-<block>.hds-<block>__element
@mixin unscopedElement($block, $element) {
  @at-root {
    .#{$blockPrefix + $block}#{$elementDelimeter}#{$element} {
      @content;
    }
  }
}

// HDS add-on to to append new element to current selector
@mixin childElement($block, $element) {
  .#{$blockPrefix + $block}#{$elementDelimeter}#{$element} {
    @content;
  }
}

// HDS add-on to create .hds-<block>-className
@mixin dashedClassName($block, $className) {
  @at-root {
    .#{$blockPrefix + $block}-#{$className} {
      @content;
    }
  }
}
